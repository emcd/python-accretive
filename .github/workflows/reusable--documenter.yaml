name: Reusable Documenter

on:
  workflow_call:
    inputs:
      include-reports:
        description: 'Include code reports with website?'
        default: false
        required: false
        type: boolean
      python-version:
        required: true
        type: string

jobs:

  generate:
    runs-on: ubuntu-latest
    steps:

      - name: Prepare Python
        uses: emcd/python-accretive/.github/actions/python-hatch@master
        with:
          python-version: '${{ inputs.python-version }}'

      - name: Restore Coverage Reports
        if: ${{ inputs.include-reports }}
        uses: actions/download-artifact@v4
        with:
          name: coverage-reports--${{ github.run_id }}
          path: .auxiliary/artifacts/coverage-pytest

      - name: Generate Documentation
        id: generate
        run: |
          hatch --env develop run docsgen
        shell: bash

      - name: Update Website
        id: update-website
        run: |
          set -eu -o pipefail
          tarball="$(pwd)/.auxiliary/publications/website.tar.xz"
          git fetch origin publication || true
          git checkout publication -- "${tarball}" || true
          version="$(hatch --env develop version 2>/dev/null)"
          hatch --env develop run python .auxiliary/utilities/update-website.py "${version}"
          git stash save --include-untracked 'website'
          echo "tarball=${tarball}" >>${GITHUB_OUTPUT}
          cat ${GITHUB_OUTPUT}
        shell: bash

      # TODO: Sign commit with GPG key.
      #       (Probably cannot use Github API to create commit,
      #        because Git LFS filters will not run.)
      - name: Update Publication Branch
        id: update-branch
        run: |
          set -eu -o pipefail
          git config --global user.name 'Github Actions Robot'
          git config --global user.email '${{ github.actor }}@users.noreply.github.com'
          current_branch="$(git rev-parse --abbrev-ref HEAD)"
          git checkout publication || git checkout -b publication
          rm --force '${{ steps.update-website.outputs.tarball }}'
          git stash pop
          git add '${{ steps.update-website.outputs.tarball }}'
          git commit --message='Update documents for publication.'
          git push origin publication
          git checkout "${current_branch}"
          echo "website=$(pwd)/.auxiliary/artifacts/website" >>${GITHUB_OUTPUT}
          cat ${GITHUB_OUTPUT}
        shell: bash

      - name: Upload Pages Artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: '${{ steps.update-branch.outputs.website }}'

  publish:
    needs: generate
    permissions:
      id-token: write # to verify deployment originates from appropriate source
      pages: write    # to deploy to Pages
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:

      - name: Deploy Pages Artifact
        id: deployment
        uses: actions/deploy-pages@v4
